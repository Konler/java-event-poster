{
	"info": {
		"_postman_id": "59e2a90e-17ef-4948-a001-9603501a2ee7",
		"name": "My \"Explore with me\" Feature comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Добавление пользователя 136",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Mariia\",\r\n    \"email\":\"Mary@hotmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя 137",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Mikhail\",\r\n    \"email\":\"Mishanya@hotmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Добавление категории 121",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно соответствовать отправленному в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Entertainment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление категории 122",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно соответствовать отправленному в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Extreme\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/categories/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление события 106",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
									"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"Прыжок с парашютом с инструктором\",\r\n  \"category\": 122,\r\n  \"description\": \"В тандеме прыгают, как правило, с высоты четыре тысячи метров. Свободное падение длится около минуты, а затем пилот раскрывает парашют — крыло. Вы можете наслаждаться ощущениями и любоваться окрестностями.\",\r\n  \"eventDate\": \"2024-10-15 15:10:05\",\r\n  \"location\": {\r\n    \"lat\": 58.56,\r\n    \"lon\": 88.63\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Прыжок с парашютом\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление события 107",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
									"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"annotation\": \"Прогулки на сапах с инструктором\",\r\n  \"category\": 121,\r\n  \"description\": \"Сап-серфинг (SUP-серфинг) - это одна из разновидностей серфинга. Основное отличие САП-серфинга от обычного серфа, заключается в наличии у райдера специального весла, по средствам которого и осуществляется перемещение по воде. Доски для САПа обычно длиннее и шире стандартных досок для серфинга. САП-серфинг идеальная возможность стать ближе к миру больших волн в Российских условиях\",\r\n  \"eventDate\": \"2024-08-08 10:00:00\",\r\n  \"location\": {\r\n    \"lat\": 100.56,\r\n    \"lon\": 95.63\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 5,\r\n  \"requestModeration\": false,\r\n  \"title\": \"Сап-серфинг\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/1/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Private",
					"item": [
						{
							"name": "Добавление комментария к событию 106",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, authorName, createdOn, eventId, status\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('authorName');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('status');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
											"    pm.expect(target.status).not.be.null;\r",
											"    pm.expect(target.status, '\"status\" field').eq('PENDING');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Руки в стороны, как у птицы крылья. Ветер бьёт по лицу. Скорость ого-го, и я скорее стремлюсь смириться с ощущениями свободного падения, чем смотреть по сторонам. Но вот, парашют раскрыт - можно оглядеться вокруг. Инструктор превращается в экскурсовода и ориентирует на местности – рассказывает, что за объекты нам видны с высоты.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "eventId",
											"value": "106"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария от несуществующего пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"eventId\": 1,\r\n    \"text\": \"Руки в стороны, как у птицы крылья. Ветер бьёт по лицу. Скорость ого-го, и я скорее стремлюсь смириться с ощущениями свободного падения, чем смотреть по сторонам. Но вот, парашют раскрыт - можно оглядеться вокруг. Инструктор превращается в экскурсовода и ориентирует на местности – рассказывает, что за объекты нам видны с высоты. \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "999"
										},
										{
											"key": "eventId",
											"value": "106"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария к несуществующему событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"eventId\": 5,\r\n    \"text\": \"Руки в стороны, как у птицы крылья. Ветер бьёт по лицу. Скорость ого-го, и я скорее стремлюсь смириться с ощущениями свободного падения, чем смотреть по сторонам. Но вот, парашют раскрыт - можно оглядеться вокруг. Инструктор превращается в экскурсовода и ориентирует на местности – рассказывает, что за объекты нам видны с высоты. \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId",
										"comments",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "eventId",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария с text = null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"eventId\": 1,\r\n    \"text\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "eventId",
											"value": "106"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария с text = blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"eventId\": 1,\r\n    \"text\": \"       \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "eventId",
											"value": "106"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария к событию 137",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, authorName, createdOn, eventId, status\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('authorName');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('status');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
											"    pm.expect(target.status).not.be.null;\r",
											"     pm.expect(target.status, '\"status\" field').eq('PENDING');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Покатали ну очень классно, в комфортном темпе, с купанием на остановке! Сам процесс гребли - кайф! Можно помедитировать и «идти» медленно, можно наперегонки. Ветер в волосах, легкое покачивание на волнах от проходящих мимо катеров, песочек на ногах - лучше и не придумаешь этим невыездным летом в Москве! Нагрузка на тело достаточно мягкая, подойдет для любой физ подготовки!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events",
										":eventId",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "eventId",
											"value": "107"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария автором",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, authorName, createdOn, eventId, status\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('authorName');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('status');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
											"    pm.expect(target.status).not.be.null;\r",
											"    pm.expect(target.status, '\"status\" field').eq('PENDING');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Руки в стороны, как у птицы крылья. Ветер бьёт по лицу. Скорость ого-го, и я скорее стремлюсь смириться с ощущениями свободного падения, чем смотреть по сторонам. Но вот, парашют раскрыт - можно оглядеться вокруг. Инструктор превращается в экскурсовода и ориентирует на местности – рассказывает, что за объекты нам видны с высоты. ОБНОВЛЕНИЕ КОММЕНТАРИЯ\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария не автором",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Руки в стороны, как у птицы крылья. Ветер бьёт по лицу. Скорость ого-го, и я скорее стремлюсь смириться с ощущениями свободного падения, чем смотреть по сторонам. Но вот, парашют раскрыт - можно оглядеться вокруг. Инструктор превращается в экскурсовода и ориентирует на местности – рассказывает, что за объекты нам видны с высоты. ОБНОВЛЕНИЕ КОММЕНТАРИЯ\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "137"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария с text = null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария с text = blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"        \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление несуществующего комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Руки в стороны, как у птицы крылья. Ветер бьёт по лицу. Скорость ого-го, и я скорее стремлюсь смириться с ощущениями свободного падения, чем смотреть по сторонам. Но вот, парашют раскрыт - можно оглядеться вокруг. Инструктор превращается в экскурсовода и ориентирует на местности – рассказывает, что за объекты нам видны с высоты. ОБНОВЛЕНИЕ КОММЕНТАРИЯ\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "commentId",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Обновление комментария несуществующим пользователем",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Руки в стороны, как у птицы крылья. Ветер бьёт по лицу. Скорость ого-го, и я скорее стремлюсь смириться с ощущениями свободного падения, чем смотреть по сторонам. Но вот, парашют раскрыт - можно оглядеться вокруг. Инструктор превращается в экскурсовода и ориентирует на местности – рассказывает, что за объекты нам видны с высоты. ОБНОВЛЕНИЕ КОММЕНТАРИЯ\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "999"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария по id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, authorName, createdOn, eventId, status\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('authorName');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('status');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение несуществующего комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "commentId",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение комментария по id от несуществующего пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "999"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка всех комментариев пользователя с id 136",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Должен быть список из двух комментариев\", function () {\r",
											"    pm.expect(target.length).equal(2, \"Список должен содержать два события\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка всех комментарией пользователя с id 137",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Должен быть пустой список\", function () {\r",
											"    pm.expect(target.length).equal(0, \"Список должен быть пустым\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "137"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка комментариев от несуществующего пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										""
									],
									"variable": [
										{
											"key": "userId",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария 2 пользователем 136",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 или 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "commentId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление несуществующего комментария пользователем 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "commentId",
											"value": "999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление чужого комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "137"
										},
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Проверка удаления комментария с id 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "136"
										},
										{
											"key": "commentId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Public",
					"item": [
						{
							"name": "Получение всех комментариев о событии 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Должен быть список из одного коммента\", function () {\r",
											"    pm.expect(target.length).equal(1, \"Список должен содержать событие\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "106"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев о событии 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Должен быть пустой список\", function () {\r",
											"    pm.expect(target.length).equal(0, \"Список должен быть пустым\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "107"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "Обновление комментария администратором",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, authorName, createdOn, eventId, status\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('text');\r",
											"pm.expect(target).to.have.property('authorName');\r",
											"pm.expect(target).to.have.property('createdOn');\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('status');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту в запросе');\r",
											"    pm.expect(target.status).not.be.null;\r",
											"    pm.expect(target.status, '\"status\" field').eq('PUBLISHED');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Руки в стороны, как у птицы крылья. Ветер бьёт по лицу. Скорость ого-го, и я скорее стремлюсь смириться с ощущениями свободного падения, чем смотреть по сторонам. Но вот, парашют раскрыт - можно оглядеться вокруг. Инструктор превращается в экскурсовода и ориентирует на местности – рассказывает, что за объекты нам видны с высоты. ОБНОВЛЕНИЕ КОММЕНТАРИЯ. ОПУБЛИКОВАНО АДМИНИСТРАТОРОМ\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария администратором",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 или 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление несущестующего комментария администратором",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "999"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "default"
		}
	]
}